
git-sCm.com


git-scm.com/downloads
first time setup:
configure username and email
git config --global user.name "ausdiemouse"	#omit the "--global" switch to set for a local repo else it defaults to global setting 
git config --global user.email "ausdiemouse@gmail.com"

git verbs:
git config --list
git config --help
git help add

existing project on local m/c
project online



Local:
git init myproject
cd myproject
touch testfile.txt
git status
git add . 		or git add <filename>  or git add -A

git reset <filename> 	#removes file from staging area
git reset		#removes all files from staging area	
git rm --cached <filename>	#removes from staging area

git commit -m "text"
git log

touch .gitignore
	--add files names to the .gitignore file.
	--git add .
	--git commit -m "adding .gitignore"

Branching and merging:
git branch <branchname>
git checkout <branchname>	git checkout -b <branchname>	#combine creation and checkout
git checkout master
git status 			#ensure that we are on the destination branch in most cases master before merging
git merge <branchname>		git merge master 	#if you are on a dev branch and want to pull in master to dev.
	git mergetool

git branch -d <branchname>	#deletes a merged branch
git branch -D <branchname>	#delete branch even if not merged



git remote

git clone <repo path>		#ensure you are in the folder where you want to clone it too.
git clone <repo path> ./<path>/<path>

git remote -v
git branch -a

git diff

git pull origin master
git push origin master			#git push -u origin <branchname>	#git branch -a

git branch --merged


git branch -d <branchame>		#local delete
git branch -a
git push origin --delete <branchname>	#Remote delete



#Revisit:
git stash  		#clears current dir for quick fixes and allows user to go back to work. 	#git stash -u
git stash apply 
git stash list		#view
git stash show		#inspect


Distributed:
git pull		#pulls all files into new repo
git merge

git fetch 		#separate branch on repo

git rebase	#linear workflow	git rebase master

advanced:
git log --graph --decorate --abbrev-commit -all --pretty=online
git log --author="ausdiemouse"

1)go to github/bitbucket create a repo
2)



push an existing repository from the command line:
	git remote add origin https://github.com/ausdiemouse/git-demo.git
	git push -u origin master		# -u switch tracks the changes.

create a new repository on the command line:
	echo "# git-demo" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/ausdiemouse/git-demo.git
	git push -u origin master


Notes:
Distributed and low bandwidth
Journal of changes

Put master in the command prompt?
Going back to a previous version?
Ans:	git revert <7char-commit-hash>
	git revert HEAD 			#last commit

How to approach git clone or git init
Create branches based on features or simply create a dev branch


Versioning
Collaboration
Backup
Analyze
types: SVN, CVS, Mercurial, Git
git, github - opensource, distributed version control, fast, data integrity. 
jenkins - CI

written in C by Linus Torvalds


Create
	init
Change
	status
	add
	commit
	rm
	reset
Parallel Dev:
	branch
	merge
	rebase
Sync Repos:
	add origin
	push
	pull

Create a repo/Pull from n existing repo
Add files to the repo
Commit changes
push changes to repo
create branches 
merge branches 


ssh-keygen
ssh-add ~/.ssh/id_rsa	# add the key to authorized keys.
ssh -vT git@github.com	# use this to validate the conection
ssh-add -l		# list agents added


